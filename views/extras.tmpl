{{define "html-head"}}
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="dcrdata web">
    <meta name="author" content="dcrdata">
    <!--  Custom favicon  -->
    <link rel="apple-touch-icon" sizes="180x180" href="/images/favicon/apple-touch-icon.png">
    <link rel="icon" href="/images/favicon/favicon.ico">
    <link rel="icon" type="image/png" href="/images/favicon/favicon-32x32.png" sizes="32x32">
    <link rel="icon" type="image/png" href="/images/favicon/favicon-16x16.png" sizes="16x16">
    <link rel="manifest" href="/images/favicon/manifest.json">
    <link rel="mask-icon" href="/images/favicon/safari-pinned-tab.svg">
    <link rel="shortcut icon" href="/images/favicon/favicon.ico">
    <meta name="apple-mobile-web-app-title" content="deCRED - decentralized credit">
    <meta name="application-name" content="deCRED - decentralized credit">
    <meta name="msapplication-TileColor" content="#2973ff">
    <meta name="msapplication-TileImage" content="/images/favicon/mstile-144x144.png">
    <meta name="msapplication-config" content="/images/favicon/browserconfig.xml">
    <meta name="turbolinks-cache-control" content="no-cache">
    <title>{{.}}</title>
    <link href="/css/bootstrap.css" rel="stylesheet">
    <link href="/css/main.css" rel="stylesheet">
    <!-- <link rel="stylesheet/less" type="text/css" href="/css/dynamic.less"> -->
    <script src="/js/messagesocket.js"></script>
    <script src="/js/humanize.js"></script>
    <script src="/js/turbolinks.js"></script>
    <script src="/js/jquery.js"></script>
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
</head>
{{end}}

{{define "navbar"}}
<div class="top-nav">
    <div class="container">
        <div class="d-flex align-items-center flex-wrap">
            <div class="d-flex align-items-center">
                <div class="col-sm-auto" style="padding: 0 2px">
                    <a href="/" class="dcricon-decred no-underline"></a>
                </div>
                <div class="col-sm-auto"><a href="/blocks" title="Explorer">Explore</a></div>
            </div>
            <div class="col" style="padding: 0 5px;">
                <form class="navbar-form" role="search" id="search-form" action="/search">
                    <div class="input-group">
                        <input
                            autofocus
                            type="text"
                            name="search"
                            id="search"
                            class="form-control top-search"
                            placeholder="Search for blocks, addresses or transactions"
                        />
                    </div>
                </form>
            </div>
            <div>
                <a id="sun-toggle" href="javascript:toggleSun()" class="dcricon-sun-fill no-underline"></a>
            </div>
        </div>
    </div>
</div>
<div id="watermark">HODL<br>HODL<br>HODL</div>
<script data-turbolinks-eval="false">
    $.ajaxSetup({
        cache: true
    });
    function setCookie(cname, cvalue, exMins) {
        var d = new Date();
        d.setTime(d.getTime() + (exMins*60*1000));
        var expires = "expires="+d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
    }
    var sunToggle = document.getElementById("sun-toggle")
    var darkBGCookieName = 'dcrdataDarkBG';
    function darkEnabled() {
        return document.cookie.includes(darkBGCookieName)
    }
    if (darkEnabled()) {
        toggleToDarkClasses(document.body)
    } else {
        toggleToLightClasses(document.body)
    }
    function toggleToDarkClasses(body) {
        $(sunToggle).removeClass('dcricon-sun-fill')
        $(sunToggle).addClass('dcricon-sun-stroke')
        $(body).addClass('darkBG')
    }
    function toggleToLightClasses(body) {
        $(body).removeClass('darkBG');
        $(sunToggle).removeClass('dcricon-sun-stroke')
        $(sunToggle).addClass('dcricon-sun-fill')
    }
    function toggleSun() {
        if (darkEnabled()) {
            setCookie(darkBGCookieName, '', 0)
            toggleToLightClasses(document.body)
        } else {
            setCookie(darkBGCookieName, 1, 525600)
            toggleToDarkClasses(document.body)
        }
    }
    document.addEventListener("turbolinks:before-render", function(event) {
        if (darkEnabled()) {
            toggleToDarkClasses(event.data.newBody)
        } else {
            toggleToLightClasses(event.data.newBody)
        }
    })


    function updateConnectionStatus(msg, connected) {
        var el = $('#connection');
        el.removeClass('hidden')
        if (connected) {
            el.addClass('connected')
            el.removeClass('disconnected')
        } else {
            el.removeClass('connected');
            el.addClass('disconnected');
        }
        el.html(msg + '<div></div>')
    }

    function getSocketURI(loc) {
        var protocol = (loc.protocol === 'https:') ? 'wss' : 'ws'
        return protocol + "://" + loc.host + '/ws'
    }

    var ws; // websocket global
    function createWebSocket(loc) {
        var uri = getSocketURI(loc)
        ws = new MessageSocket(uri);
        console.log("createdWebSocket", uri, ws)
        ws.registerEvtHandler("open", function() {
            console.log('Connected')
            updateConnectionStatus('Connected', true);
        });

        ws.registerEvtHandler("close", function() {
            console.log('Disconnected')
            updateConnectionStatus('Disconnected', false);
        });

        ws.registerEvtHandler("error", function(evt) {
            console.log("WebSocket error:", evt);
            updateConnectionStatus('Disconnected', false);
        });

        ws.registerEvtHandler("newtx", function(evt) {
            console.log("New Transaction: ", evt);
            var tx = JSON.parse(evt)
            addTxRow = function(str) {
                var rows = $('#' + str +' tbody tr')
                var totalTxt = "" 
                humanize.decimalParts(tx.total, false, 8).forEach(function (str) {
                    totalTxt += str.textContent
                })
                var newRow = '<tr><td class="break-word"><span><a class="hash" href="/tx/' +
                    tx.hash + '">' + tx.hash + '</a></span></td>' +
                    '<td class="mono fs15 text-right"> ' + totalTxt +'</td>' +
                    '<td class="mono fs15 text-right">' + tx.size + ' B</td>' +
                    '<td class="mono fs15 text-right" data-age="' + tx.time +'">' + humanize.timeSince(tx.time) +'</td>'
                var newRowHtml = $.parseHTML(newRow)
                $(newRowHtml).insertBefore(rows.first())
            }
            switch (tx.Type) {
                case "Ticket":
                    $('#mempool_ticket_number').text(parseInt($('#mempool_ticket_number').text()) + 1)
                    addTxRow('mempool_tickets')
                    break
                case "Vote":
                    $('#mempool_vote_number').text(parseInt($('#mempool_vote_number').text()) + 1)
                    var rows = $('#mempool_votes tbody tr')
                    var totalTxt = "" 
                    humanize.decimalParts(tx.total, false, 8).forEach(function (str) {
                        totalTxt += str.textContent
                    })
                    var newRow = '<tr><td class="break-word"><span><a class="hash" href="/tx/' +
                        tx.hash + '">' + tx.hash + '</a></span></td>' +
                        '<td class="mono fs15">' + tx.vote_info.vote_version + '</td>' +
                        '<td class="mono fs15">' + tx.vote_info.block_validation.validity + '</td>' +
                        '<td class="mono fs15">' + tx.vote_info.vote_choices[0].id + '</td>' +
                        '<td class="mono fs15">' + tx.vote_info.vote_choices[0].choice.Id + '</td>' +
                        '<td class="mono fs15 text-right"> ' + totalTxt +'</td>' +
                        '<td class="mono fs15">' + tx.size + ' B</td>' +
                        '<td class="mono fs15 text-right" data-age="' + tx.time +'">' + humanize.timeSince(tx.time) +'</td>'
                    var newRowHtml = $.parseHTML(newRow)
                    $(newRowHtml).insertBefore(rows.first())
                    break
                case "Regular":
                    $('#mempool_regular_number').text(parseInt($('#mempool_regular_number').text()) + 1)
                    addTxRow('mempool_transactions')
                    break
                case "Revoke":
                    $('#mempool_revoke_number').text(parseInt($('#mempool_revoke_number').text()) + 1)
                    addTxRow('mempool_revocations')
                    break
            }
            
            if (window.location.pathname == "/"){
                var rows = $('#mini-transactions tbody tr')
                var totalTxt = "" 
                humanize.decimalParts(tx.total, false, 8).forEach(function (str) {
                    totalTxt += str.textContent
                })
                var newRow = '<tr><td class="break-word"><span><a class="hash" href="/tx/' +
                    tx.hash + '">' + tx.hash + '</a></span></td>' +
                    '<td class="mono fs15">' + tx.Type + '</td>' +
                    '<td class="mono fs15">' + totalTxt +'</td>' +
                    '<td class="mono fs15">' + tx.size + ' B</td>' +
                    '<td class="mono fs15" data-age="' + tx.time +'">' + humanize.timeSince(tx.time) +'</td></tr>'
                var newRowHtml = $.parseHTML(newRow)
                rows.last().remove()
                $(newRowHtml).insertBefore(rows.first())
            }
            setTimeElements()
        });

        ws.registerEvtHandler("getmempooltxsResp", function(evt) {
            console.log("Get Mempool: ", evt)
            var newTable = ''
            var makeNewTable =function (tx) {
                    var totalTxt = "" 
                    humanize.decimalParts(tx.total, false, 8).forEach(function (str) {
                        totalTxt += str.textContent
                    })
                    newTable += '<tr><td class="break-word"><span><a class="hash" href="/tx/' +
                    tx.hash + '">' + tx.hash + '</a></span></td>' +
                    '<td class="mono fs15 text-right">' + totalTxt +'</td>' +
                    '<td class="mono fs15 text-right">' + tx.size + ' B</td>' +
                    '<td class="mono fs15 text-right" data-age="' + tx.time +'">' + humanize.timeSince(tx.time) + '</td>'
                }
            var m = JSON.parse(evt)

            m.tickets.forEach(makeNewTable)
            $('#mempool_tickets tbody').html($.parseHTML(newTable))

            newTable = ''
            m.tx.forEach(makeNewTable)
            $('#mempool_transactions tbody').html($.parseHTML(newTable))

            newTable = ''
            m.votes.forEach(function (tx) {
                var rows = $('#mempool_votes tbody tr')
                    var totalTxt = "" 
                    humanize.decimalParts(tx.total, false, 8).forEach(function (str) {
                        totalTxt += str.textContent
                    })
                    newTable += '<tr><td class="break-word"><span><a class="hash" href="/tx/' +
                        tx.hash + '">' + tx.hash + '</a></span></td>' +
                        '<td class="mono fs15">' + tx.vote_info.vote_version + '</td>' +
                        '<td class="mono fs15">' + tx.vote_info.block_validation.validity + '</td>' +
                        '<td class="mono fs15">' + tx.vote_info.vote_choices[0].id + '</td>' +
                        '<td class="mono fs15">' + tx.vote_info.vote_choices[0].choice.Id + '</td>' +
                        '<td class="mono fs15 text-right"> ' + totalTxt +'</td>' +
                        '<td class="mono fs15">' + tx.size + ' B</td>'  +
                        '<td class="mono fs15 text-right" data-age="' + tx.time +'">' + humanize.timeSince(tx.time) +'</td>'
       
            })
            $('#mempool_votes tbody').html($.parseHTML(newTable))

            if (m.num_revokes > 0) {
                newTable = ''
                m.votes.forEach(makeNewTable)
                $('#mempool_revocations tbody').html($.parseHTML(newTable))
            }

            setTimeElements()
        });     

        ws.registerEvtHandler("ping", function(evt) {
            console.log("ping. users online: ", evt)
            //ws.send("pong", "copy")
        });
        ws.registerEvtHandler("decodetxResp", function(evt) {
            console.log("Got message: ", evt);
            $("#decode_header").text("Decoded tx");
            $("#decoded_tx").text(evt);
        })
        ws.registerEvtHandler("sendtxResp", function(evt) {
            console.log("Got message: ", evt);
            $("#decode_header").text("Sent tx");
            $("#decoded_tx").text(evt);
        })
        var updateBlockData = function (event) {
            console.log("Received newblock message", event);
            var newBlock = JSON.parse(event);
            var confirms = $('[data-confirmation-block-height]');
            $.each(confirms, function(i, v) {
                if (isNaN($(v).text())) {
                    $(v).text("0");
                }
                $(v).text(
                    newBlock.block.height - $(v).data('confirmation-block-height')
                )
            })
            
            // block summary data
            var b = newBlock.block;
            desktopNotifyNewBlock(b);

            var expTableRows = $('#explorertable tbody tr');
            //var CurrentHeight = parseInt($('#explorertable tbody tr td').first().text());
            if (expTableRows){
                expTableRows.last().remove()
                var newRow = '<tr id="' + b.height + '">' +
                    '<td><a href="/block/' + b.height + '" class="fs18">' + b.height + '</a></td>' +
                    '<td>' + b.tx + '</td>' +
                    '<td>' + b.votes + '</td>' +
                    '<td>' + b.tickets + '</td>' +
                    '<td>' + b.revocations + '</td>' +
                    '<td>' + humanize.bytes(b.size) + '</td>' +
                    '<td data-age=' + b.time + '>' + humanize.timeSince(b.time) + '</td>' +
                    '<td>' + b.formatted_time + '</td>' +
                '</tr>'
                var newRowHtml = $.parseHTML(newRow)
                $(newRowHtml).insertBefore(expTableRows.first())
                setTimeElements()
            }
            var ex = newBlock.extra
            if ($("#bsubsidy_total").text() !== "") {
                $("#difficulty").html(humanize.decimalParts(ex.difficulty, true, 8))
                $("#bsubsidy_total").html(humanize.decimalParts(ex.subsidy.total/100000000, false, 8))
                $("#bsubsidy_pow").html(humanize.decimalParts(ex.subsidy.pow/100000000, false, 8))
                $("#bsubsidy_pos").html(humanize.decimalParts((ex.subsidy.pos/500000000), false, 8)) // 5 votes per block (usually)
                $("#bsubsidy_dev").html(humanize.decimalParts(ex.subsidy.dev/100000000, false, 8))
                $("#coin_supply").html(humanize.decimalParts(ex.coin_supply/100000000, true, 8))
                $("#blocksdiff").html(humanize.decimalParts(ex.sdiff, false, 8))
                $("#dev_fund").html(humanize.decimalParts(ex.dev_fund/100000000, true, 8))
                $("#window_block_index").text(ex.window_idx)
                $("#pos-window-progess-bar").css({ width: (ex.window_idx/ex.params.window_size)*100 + "%" })
                $("#reward_block_index").text(ex.reward_idx)
                $("#pow-window-progess-bar").css({ width: (ex.reward_idx/ex.params.reward_window_size)*100 + "%" })
                $("#pool_size").text(ex.pool_info.size)
                $("#pool_value").html(humanize.decimalParts(ex.pool_info.value, true, 8))
                $("#ticket_roi").html(parseFloat(ex.roi).toFixed(2))
                $("#target_percent").html(parseFloat(ex.pool_info.percent_target).toFixed(2))
                $("#pool_size_percentage").html(parseFloat(ex.pool_info.percent).toFixed(2))
            }
        };
        ws.registerEvtHandler("newblock", updateBlockData);

        var updateMempool = function (event) {
            console.log("Received mempool message", event);
            var m = JSON.parse(event);

            //mempool info
            $('#mempool_ticket_number').text(m.num_tickets)
            $('#mempool_vote_number').text(m.num_votes)
            $('#mempool_regular_number').text(m.num_regular)
            $('#mempool_revoke_number').text(m.num_revokes)
            if (window.location.pathname == "/mempool") {
                $('#best_block').text(m.block_height)
                $('#best_block').attr('href', '/block/'+m.block_height)
                $('#best_block_time').data('age', m.block_time)
                $('#mempool_size').text(m.formatted_size)
                ws.send("getmempooltxs", "")
            }

            if (window.location.pathname == "/") {
                var newTable = ""
                m.latest.forEach(function (tx) {
                    var totalTxt = "" 
                    humanize.decimalParts(tx.total, false, 8).forEach(function (str) {
                        totalTxt += str.textContent
                    })
                    newTable += '<tr><td class="break-word"><span><a class="hash" href="/tx/' +
                    tx.hash + '">' + tx.hash + '</a></span></td>' +
                    '<td class="mono fs15">' + tx.Type + '</td>'+
                    '<td class="mono fs15">' + totalTxt +'</td>' +
                    '<td class="mono fs15">' + tx.size + ' B</td>' +
                    '<td class="mono fs15" data-age="' + tx.time +'">' + humanize.timeSince(tx.time) +'</td></tr>' 
                })
                $('#mini-transactions tbody').html(newTable)
            }
            setTimeElements()
            updateAges()
        };
        ws.registerEvtHandler("mempool", updateMempool);
    }
    document.getElementById('search').onkeypress = function(e){
        if (!e) e = window.event;
        var keyCode = e.keyCode || e.which;
        if (keyCode == '13'){
            Turbolinks.visit("/search?search="+this.value);
            return false;
        }
}
    function desktopNotifyNewBlock (block) {
            function onShowNotification () {
                console.log('block ntfn shown');
            }
            function onCloseNotification () {
                console.log('block ntfn closed');
            }
            function onClickNotification () {
                console.log('block ntfn clicked');
            }
            function onErrorNotification () {
                console.error('Error showing notification. You may need to request permission.');
            }
            function onPermissionGranted () {
                console.log('Permission has been granted by the user');
                doNotification();
            }
            function onPermissionDenied () {
                console.warn('Permission has been denied by the user');
            }
            function doNotification () {
                var newBlockNtfn = new Notify('New Decred Block Mined', {
                    body: 'Decred block mined at height ' + block.height,
                    tag: 'blockheight',
                    image: '/images/dcrdata144x128.png',
                    icon: '/images/dcrdata144x128.png',
                    notifyShow: onShowNotification,
                    notifyClose: onCloseNotification,
                    notifyClick: onClickNotification,
                    notifyError: onErrorNotification,
                    timeout: 10
                });
                newBlockNtfn.show();
            }
            if (!Notify.needsPermission) {
                doNotification();
            } else if (Notify.isSupported()) {
                Notify.requestPermission(onPermissionGranted, onPermissionDenied);
            }
        }
</script>

<script>
    if (!ws) {
        createWebSocket(window.location)
    }
</script>

<script src="/js/notify.min.js"></script>
<script>
Notify.requestPermission(function(){console.log("Desktop notification permissions granted.")},
    function(){console.log("Desktop notification permissions denied.")});
</script>
{{end}}

{{define "footer"}}
<footer class="navbar-fixed-bottom">
    <div class="container wrapper text-center">
        <div style="float: left">
            <a class="nav-item" href="/decodetx" title="Decode or send a raw transaction">Decode/Broadcast Tx</a>
            <a class="nav-item" href="https://github.com/decred/dcrdata#json-rest-api" title="API Endpoints" target="_blank">JSON-API Docs</a>
            <a class="nav-item" href="/mempool" title="Decred mempool">Mempool</a>
        </div>
        <div style="text-align: left; margin:0 auto !important; display:inline-block">
            <a class="nav-item" href="https://github.com/decred/dcrdata" title="dcrdata on GitHub" target="_blank">dcrdata v{{.Version}}</a>
            <a class="nav-item" href="https://github.com/decred/dcrdata/blob/master/LICENSE" target="_blank">© 2017-2018 The dcrdata developers (ISC)</a>
        </div>
        <div style="float: right;">
            <span data-turbolinks-permanent class="nav-item hidden" id="connection" title="While connected, you will receive live page updates and desktop notifications.">Connecting to WebSocket...<div></div></span>
        </div>
    </div>
</footer>
<script data-turbolinks-eval="false">
    var ages, hiddenAges;
    function setTimeElements() {
        ages = $('[data-age]');
    }
    function updateAges() {
        $.each(ages, function(i, age) {
            var unixTime = $(age).data('age');
            if (unixTime > 0) {
                $(age).text(
                    humanize.timeSince(unixTime)
                )
            }
        })
    }
    document.addEventListener("turbolinks:load", function(){
        setTimeElements()
        updateAges()
    })
    setInterval(updateAges, 10000);
</script>
<script>
    $('.scriptDataStar').on('click',function(){
        $(this).next('.scriptData').slideToggle();
    });
</script>
{{end}}

{{define "decimalParts"}}<span class="int">{{ index . 0 }}</span><span class="dot">.</span><span class="decimal">{{ index . 1 }}<span class="trailing-zeroes">{{ index . 2 }}</span></span>{{end}}
